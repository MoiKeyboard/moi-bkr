# IBKR/config/README.md
name: Config Sync

on:
  push:
    paths:
      - 'config/base.yml'
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
          pip install yamllint
          pip install yq
          npm install -g prettier

      - name: Format and Lint YAML
        run: |
          # Format all YAML files using prettier
          echo "Formatting YAML files with prettier..."
          prettier --write "config/**/*.yml"

          # Lint all YAML files in the config directory and subdirectories
          echo "Linting all YAML files in ./config..."
          yamllint config/ || echo "yamllint found issues"

      - name: Sync Configuration Files
        run: |
          echo "Starting configuration sync process..."
          # First sync base.yml (sorts it)
          echo "Syncing base.yml..."
          python .github/workflows/scripts/config_sync.py --config-dir config > /tmp/sync_output.txt
          
          # Then sync each environment
          for ENV in development production; do
            echo "Syncing $ENV configuration..."
            python .github/workflows/scripts/config_sync.py \
              --config-dir config \
              --environment "$ENV" >> /tmp/sync_output.txt
            
            # Append the output to step summary
            echo "### $ENV Configuration Sync Results 📝" >> $GITHUB_STEP_SUMMARY
            echo "#### Results:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat /tmp/sync_output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          done
          echo "Configuration sync completed."

      - name: Check for configuration changes
        id: check-changes
        run: |
          if [[ $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create new branch
        if: steps.check-changes.outputs.has_changes == 'true'
        id: create-branch
        run: |
          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Create new branch with timestamp
          BRANCH_NAME="auto/config-sync-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Prepare PR body
        if: steps.check-changes.outputs.has_changes == 'true'
        id: prepare-pr
        run: |
          # Create PR body file
          rm -f /tmp/pr-body.md
          echo "This PR synchronizes environment configurations with base.yml" > /tmp/pr-body.md
          echo >> /tmp/pr-body.md
          echo "### Changes Overview" >> /tmp/pr-body.md
          echo "This automated PR:" >> /tmp/pr-body.md
          echo "- Sorts all configuration files alphabetically" >> /tmp/pr-body.md
          echo "- Updates environment-specific configurations to align with changes in base.yml" >> /tmp/pr-body.md
          echo >> /tmp/pr-body.md
          echo "### Diff Details" >> /tmp/pr-body.md
          echo '```diff' >> /tmp/pr-body.md
          git diff >> /tmp/pr-body.md
          echo '```' >> /tmp/pr-body.md
          echo >> /tmp/pr-body.md
          echo "### Notes" >> /tmp/pr-body.md
          echo "- Only environment-specific overrides are preserved" >> /tmp/pr-body.md
          echo "- All other values are inherited from base.yml" >> /tmp/pr-body.md
          echo "- Review the changes to ensure no environment-specific configurations were accidentally modified" >> /tmp/pr-body.md

      - name: Commit and push changes
        if: steps.check-changes.outputs.has_changes == 'true'
        id: push-changes
        run: |
          # Commit and push changes to new branch
          git add '*.yml'
          git commit -m "chore: sort and sync configuration yml files"
          git push origin "${{ steps.create-branch.outputs.branch_name }}"
          echo "pushed=true" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.push-changes.outputs.pushed == 'true'
        id: create-pr
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          # Create Pull Request using GitHub CLI
          echo "Creating pull request..."
          if gh pr create \
            --title "Config Sync: Sort and update configuration files" \
            --body-file /tmp/pr-body.md \
            --base main \
            --head "${{ steps.create-branch.outputs.branch_name }}"; then
            
            # Get PR number after successful creation
            PR_NUM=$(gh pr view "${{ steps.create-branch.outputs.branch_name }}" --json number -q '.number')
            PR_URL=$(gh pr view "${{ steps.create-branch.outputs.branch_name }}" --json url -q '.url')
            echo "pr_number=$PR_NUM" >> $GITHUB_OUTPUT
            echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
            echo "created=true" >> $GITHUB_OUTPUT
            
            # Add PR link to step summary
            echo "## 🔄 ${{ github.workflow }} Pull Request" >> $GITHUB_STEP_SUMMARY
            echo "Created PR [#$PR_NUM]($PR_URL) for configuration sync" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "Successfully created PR #$PR_NUM"
            echo "PR URL: $PR_URL"
          else
            echo "Failed to create PR"
            echo "created=false" >> $GITHUB_OUTPUT
          fi

      - name: List old PRs to close
        if: steps.create-pr.outputs.created == 'true'
        id: list-old-prs
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          echo "Listing old PRs to close..."
          rm -f /tmp/prs_to_close.txt # Ensure file is clean

          # Get the current branch name
          CURRENT_BRANCH="${{ steps.create-branch.outputs.branch_name }}"
          echo "Current branch ($CURRENT_BRANCH) will be preserved."

          # List PRs and filter out the current one
          gh pr list --state open --search "head:auto/config-sync-" | \
            grep -v "$CURRENT_BRANCH" > /tmp/prs_to_close.txt || true

          echo "PRs to close (from /tmp/prs_to_close.txt):"
          if [ -s /tmp/prs_to_close.txt ]; then
            cat /tmp/prs_to_close.txt
            echo "has_prs_to_close=true" >> $GITHUB_OUTPUT
          else
            echo "No PRs to close"
            echo "has_prs_to_close=false" >> $GITHUB_OUTPUT
          fi

      - name: Close old PRs
        if: steps.list-old-prs.outputs.has_prs_to_close == 'true'
        id: close-old-prs
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          echo "Closing older config-sync pull requests..."
          NEW_PR_NUM="${{ steps.create-pr.outputs.pr_number }}"

          echo "New PR: #$NEW_PR_NUM"
          echo "PRs to close:"
          cat /tmp/prs_to_close.txt

          while IFS=$'\t' read -r PR_NUM TITLE BRANCH MERGE_STATUS; do # Use IFS to read tab-separated values
            if [ -n "$PR_NUM" ]; then
              # PR_NUM might have # prefix from some gh versions, remove it
              PR_NUM_CLEAN=$(echo "$PR_NUM" | tr -d '#')
              echo "Closing PR #$PR_NUM_CLEAN (Title: $TITLE, Branch: $BRANCH)"
              gh pr close "$PR_NUM_CLEAN" --comment "Superseded by PR #$NEW_PR_NUM"
            fi
          done < /tmp/prs_to_close.txt

          echo "closed_prs=true" >> $GITHUB_OUTPUT

      - name: List old branches to clean up
        if: steps.create-pr.outputs.created == 'true'
        id: list-old-branches
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          echo "Listing old branches to clean up..."
          rm -f /tmp/branches_to_delete.txt # Ensure file is clean

          # Get the current branch name
          CURRENT_BRANCH="${{ steps.create-branch.outputs.branch_name }}"
          echo "Current branch ($CURRENT_BRANCH) will be preserved."

          # List branches and filter out the current one
          git branch -r | \
            grep "origin/auto/config-sync-" | \
            sed 's/origin\///' | \
            grep -v "^$" | \
            grep -v "^${CURRENT_BRANCH}$" > /tmp/branches_to_delete.txt || true

          echo "Branches to delete (from /tmp/branches_to_delete.txt):"
          if [ -s /tmp/branches_to_delete.txt ]; then
            cat /tmp/branches_to_delete.txt
            echo "has_branches_to_delete=true" >> $GITHUB_OUTPUT
          else
            echo "No branches to delete"
            echo "has_branches_to_delete=false" >> $GITHUB_OUTPUT
          fi

      - name: Clean up branches
        if: steps.list-old-branches.outputs.has_branches_to_delete == 'true'
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          echo "Deleting old branches..."
          cat /tmp/branches_to_delete.txt

          while read -r BRANCH; do
            if [ -n "$BRANCH" ]; then
              echo "Deleting branch $BRANCH"
              git push origin --delete "$BRANCH" || echo "Could not delete branch $BRANCH"
            fi
          done < /tmp/branches_to_delete.txt

      - name: Report Status
        if: always()
        run: |
          echo "Config Sync Summary:"
          echo "- Sync status: ${{ job.status }}"
