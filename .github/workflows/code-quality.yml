name: Code Quality

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - src/**

# Add permissions
permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write

jobs:
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # pip install -r requirements.txt
          pip install black flake8

      - name: Format code with Black
        run: |
          echo "Formatting code..."
          black src/
          
      - name: Check if there are code changes after formatting
        id: git-check
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          if [[ $(git status --porcelain) ]]; then
            echo "Changes detected after formatting"
            git diff
            
            # Configure git
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            
            # Create new branch with timestamp
            BRANCH_NAME="auto/auto-format-$(date +%Y%m%d-%H%M%S)"
            git checkout -b $BRANCH_NAME
            
            # Commit and push changes to new branch
            git add src/
            git commit -m "style: auto-format code with Black"
            git push origin $BRANCH_NAME
            
            # Create Pull Request using GitHub CLI (with token directly)
            PR_URL=$(gh pr create \
              --title "style: auto-format code with Black" \
              --body "Automated PR to format code using Black formatter" \
              --base master \
              --head $BRANCH_NAME \
              --json url -q .url)
            
            # Store PR URL for later use
            echo "pr_url=${PR_URL}" >> $GITHUB_OUTPUT
          else
            echo "No changes detected after formatting"
          fi

      - name: Check code quality with Flake8
        id: flake8
        if: always()
        run: |
          echo "Checking code quality..."
          flake8 src/ --count --show-source --statistics --config .github/.flake8
          
      - name: Generate Summary Report
        if: always()
        run: |
          echo "# Code Quality Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "## Status" >> $GITHUB_STEP_SUMMARY
          
          # Check Black formatting status
          if [[ "${{ steps.git-check.outcome }}" == "success" ]]; then
            if [[ -n "${{ steps.git-check.outputs.pr_url }}" ]]; then
              echo "- ✨ Black formatting: ✅ (Changes made and PR created)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ✨ Black formatting: ✅ (No changes needed)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- ✨ Black formatting: ❌ (Failed)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check Flake8 status using the specific step outcome
          if [[ "${{ steps.flake8.outcome }}" == "success" ]]; then
            echo "- 🔍 Flake8 checks: ✅ (Passed)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🔍 Flake8 checks: ❌ (Failed)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add PR link if it exists
          if [[ -n "${{ steps.git-check.outputs.pr_url }}" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Auto-formatting Pull Request" >> $GITHUB_STEP_SUMMARY
            echo "🔗 A pull request was created for code formatting changes: [${{ steps.git-check.outputs.pr_url }}](${{ steps.git-check.outputs.pr_url }})" >> $GITHUB_STEP_SUMMARY
          fi