name: Test Coverage

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - src/**
      - tests/**
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx pytest-cov

      - name: Run All Tests with Coverage
        id: pytest-run
        continue-on-error: true  # Allow the workflow to continue even if tests fail
        run: |
          pytest tests/ \
            --cov=src \
            --cov-report=xml:coverage.xml \
            --cov-report=term \
            -v

      - name: Generate Test Coverage Report
        if: always()  # Run even if tests fail
        run: |
          # Get coverage data from coverage.xml
          TOTAL_LINES=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(sum(int(cls.attrib.get('lines', 0)) for cls in root.findall('.//class')))")
          TOTAL_HITS=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(sum(len([line for line in cls.findall('.//line') if line.attrib['hits'] != '0']) for cls in root.findall('.//class')))")
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(f\"{float(root.attrib['line-rate']) * 100:.1f}\")")
          
          echo "# Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          
          # Overall Statistics
          echo "## Overall Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Overall coverage: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 Total lines: ${TOTAL_LINES}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Covered lines: ${TOTAL_HITS}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Module Coverage Table
          echo "## Coverage by Module" >> $GITHUB_STEP_SUMMARY
          echo "| Module | Lines | Covered | Coverage | Missing Lines |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|---------|----------|---------------|" >> $GITHUB_STEP_SUMMARY
          
          # Generate module coverage data dynamically
          python -c '
          import xml.etree.ElementTree as ET
          tree = ET.parse("coverage.xml")
          root = tree.getroot()
          
          for cls in root.findall(".//class"):
              filename = cls.attrib["filename"]
              lines = len(cls.findall(".//line"))
              hits = len([line for line in cls.findall(".//line") if line.attrib["hits"] != "0"])
              coverage = (hits / lines * 100) if lines > 0 else 0
              
              # Get missing lines
              missing_lines = [line.attrib["number"] for line in cls.findall(".//line") if line.attrib["hits"] == "0"]
              
              # Format missing lines (truncate if too long)
              missing_str = ", ".join(missing_lines[:5])
              if len(missing_lines) > 5:
                  missing_str += ", ..."
              
              # Determine coverage indicator
              indicator = "🔴" if coverage < 60 else "🟡" if coverage < 80 else "🟢"
              
              print(f"| {filename} | {lines} | {hits} | {indicator} {coverage:.1f}% | {missing_str} |")
          ' >> $GITHUB_STEP_SUMMARY
          
          # Coverage Indicators
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Coverage Indicators" >> $GITHUB_STEP_SUMMARY
          echo "- 🟢 Good coverage (≥80%)" >> $GITHUB_STEP_SUMMARY
          echo "- 🟡 Moderate coverage (60-79%)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔴 Needs improvement (<60%)" >> $GITHUB_STEP_SUMMARY
          
          # Analysis and Recommendations
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Analysis and Recommendations" >> $GITHUB_STEP_SUMMARY
          
          # Generate recommendations dynamically
          python -c '
          import xml.etree.ElementTree as ET
          tree = ET.parse("coverage.xml")
          root = tree.getroot()
          
          # Find critical areas (coverage < 60%)
          critical = []
          moderate = []
          good = []
          
          for cls in root.findall(".//class"):
              filename = cls.attrib["filename"]
              lines = len(cls.findall(".//line"))
              hits = len([line for line in cls.findall(".//line") if line.attrib["hits"] != "0"])
              coverage = (hits / lines * 100) if lines > 0 else 0
              missing_count = lines - hits
              
              if coverage < 60:
                  critical.append((filename, coverage, missing_count))
              elif coverage < 80:
                  moderate.append((filename, coverage, missing_count))
              else:
                  good.append((filename, coverage))
          
          if critical:
              print("\n### Critical Areas")
              for filename, coverage, missing in sorted(critical, key=lambda x: x[1]):
                  print(f"1. 🚨 **{filename}** ({coverage:.1f}% coverage)")
                  print(f"   - High priority: {missing} lines need coverage")
          
          if moderate:
              print("\n### Moderate Coverage Areas")
              for filename, coverage, missing in sorted(moderate, key=lambda x: x[1]):
                  print(f"1. 🔍 **{filename}** ({coverage:.1f}% coverage)")
                  print(f"   - {missing} lines need coverage")
          
          if good:
              print("\n### Well-Tested Modules")
              for filename, coverage in sorted(good, key=lambda x: x[1], reverse=True):
                  print(f"✨ **{filename}** ({coverage:.1f}% coverage)")
          ' >> $GITHUB_STEP_SUMMARY

      - name: Generate Test Coverage Badge
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])")
          PERCENTAGE=$(python -c "print(int(float('${COVERAGE}') * 100))")
          COLOR=$(awk -v coverage=$PERCENTAGE 'BEGIN {
            if (coverage < 50) print "red";
            else if (coverage < 80) print "yellow";
            else print "brightgreen";
          }')
          BADGE_URL="https://img.shields.io/badge/Test_Coverage-${PERCENTAGE}%25-${COLOR}.svg?logo=github"
          echo "BADGE_URL=$BADGE_URL" >> $GITHUB_ENV

      - name: Update Badge
        run: |
          mkdir -p .github/badges
          curl -o .github/badges/test_coverage.svg "$BADGE_URL"

      - name: Check for badge changes
        id: check-changes
        run: |
          if [[ $(git status --porcelain .github/badges/test_coverage.svg) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit Badge
        if: steps.check-changes.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git pull
          git add .github/badges/test_coverage.svg  # Only add the badge file
          git commit -m "Update test coverage badge [skip ci]"
          git push