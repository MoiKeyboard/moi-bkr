name: Build and Push Container

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. v1.0.0)'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/market-scanner
  DOCKER_BUILDKIT: 1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and test Docker Compose
        run: |
          # Create .data directory for volume mount
          mkdir -p .data
          
          # Build the image
          docker compose build
          
          # Start the container
          docker compose up -d
          
          # Wait for container to be healthy
          timeout 30s bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8000/health)" != "200" ]]; do sleep 2; done' || false
          
          # Run basic tests
          curl -f http://localhost:8000/health
          
          # Stop container
          docker compose down

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            PORT=8000
            ENV_MODE=prod

      - name: Verify Python version
        if: github.event_name != 'pull_request'
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} python --version | grep "Python 3.12"

      - name: Verify image
        if: github.event_name != 'pull_request'
        run: |
          # Pull the image we just pushed
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Run container with health check
          docker run -d --name test-container \
            -p 8000:8000 \
            -e ENV_MODE=prod \
            -e PORT=8000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Wait for container to be healthy
          timeout 30s bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8000/health)" != "200" ]]; do sleep 2; done' || false
          
          # Clean up
          docker stop test-container
          docker rm test-container
