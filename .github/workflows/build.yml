name: Build and Push Container

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. v1.0.0)'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Set image name
        run: echo "IMAGE_NAME=$(echo ${{ github.repository }}/market-scanner | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.version }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.version=${{ inputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
          platforms: linux/amd64
          build-args: |
            PORT=8000
            ENV_MODE=prod

      - name: Test container
        run: |
          # Create test network
          docker network create trading-network

          # Create test certificates directory and generate certs
          mkdir -p certs
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout certs/wildcard.key -out certs/wildcard.crt \
            -subj "/CN=*.localhost" \
            -addext "subjectAltName=DNS:*.localhost,DNS:localhost"

          # Start Traefik container with configuration matching docker-compose.yml
          docker run -d \
            --name traefik \
            --name market-scanner \
            --network trading-network \
            -p 80:80 -p 443:443 -p 8080:8080 \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            -v ${{ github.workspace }}/certs:/certs:ro \
            -e TRAEFIK_LOG_LEVEL=DEBUG \
            -e TRAEFIK_ACCESSLOG=true \
            -e TRAEFIK_API_INSECURE=true \
            -e TRAEFIK_PROVIDERS_DOCKER=true \
            -e TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80 \
            -e TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443 \
            -e TRAEFIK_ENTRYPOINTS_WEBSECURE_HTTP_TLS=true \
            -e TRAEFIK_TLS_STORES_DEFAULT_DEFAULTCERTIFICATE_CERTFILE=/certs/wildcard.crt \
            -e TRAEFIK_TLS_STORES_DEFAULT_DEFAULTCERTIFICATE_KEYFILE=/certs/wildcard.key \
            --label "traefik.enable=true" \
            --label "traefik.http.routers.traefik.tls=true" \
            --label "traefik.http.routers.traefik.entrypoints=web,websecure" \
            --label "traefik.http.routers.traefik.rule=Host(\`traefik.localhost\`)" \
            --label "traefik.http.routers.traefik.service=api@internal" \
            traefik:v3.3

          # Start market scanner container with configuration matching docker-compose.yml
          docker run -d \
            --name market-scanner \
            --network trading-network \
            -e ENV_MODE=prod \
            -e PORT=8000 \
            -v ${{ github.workspace }}/config.yaml:/app/config.yaml \
            --label "traefik.enable=true" \
            --label "traefik.http.routers.market-scanner.rule=Host(\`api.localhost\`) && PathPrefix(\`/api\`)" \
            --label "traefik.http.routers.market-scanner.entrypoints=web,websecure" \
            --label "traefik.http.routers.market-scanner.middlewares=strip-api-prefix@docker,security-headers@docker" \
            --label "traefik.http.routers.market-scanner.tls=true" \
            --label "traefik.http.services.market-scanner.loadbalancer.server.port=8000" \
            --label "traefik.http.middlewares.strip-api-prefix.stripprefix.prefixes=/api" \
            --label "traefik.http.middlewares.security-headers.headers.sslRedirect=true" \
            --label "traefik.http.middlewares.security-headers.headers.forceSTSHeader=true" \
            --label "traefik.http.middlewares.security-headers.headers.frameDeny=true" \
            --label "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true" \
            --label "traefik.http.middlewares.security-headers.headers.browserXssFilter=true" \
            --label "traefik.http.middlewares.security-headers.headers.referrerPolicy=strict-origin-when-cross-origin" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.version }}
          
          # Wait for services to be ready
          sleep 10

          # Test Traefik is running
          echo "Testing Traefik dashboard..."
          curl -k -f https://traefik.localhost/dashboard/

          # Test market-scanner through Traefik
          echo "Testing market-scanner health endpoint through Traefik..."
          curl -k -f https://api.localhost/api/health
          
          echo "Testing market-scanner scan endpoint through Traefik..."
          curl -k -f -X POST https://api.localhost/api/scan

          # Test direct health endpoint
          echo "Testing direct health endpoint..."
          curl -f http://market-scanner:8000/health
          
          # Clean up
          docker stop market-scanner traefik
          docker rm market-scanner traefik
          docker network rm trading-network
          rm -rf certs