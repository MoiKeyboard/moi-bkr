# IBKR/config/README.md
name: Config Env

on:
  workflow_run:
    workflows: ["Config Sync"]  # Name must match config-sync.yml's name
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync-config:
    # Only run if the config-sync workflow succeeded and it was a merge to main
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.event == 'pull_request' &&
       github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml yamllint yq dotenv
          # Install SOPS
          curl -L https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux.amd64 -o sops
          chmod +x sops
          sudo mv sops /usr/local/bin/

      - name: Setup SOPS
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY_FILE }}
        run: |
          echo "Extracting public key from SOPS_AGE_KEY secret"
          PUBLIC_KEY=$(echo "$SOPS_AGE_KEY" | awk '/public key:/ {print $4}' | tr -d '\n\r')
          echo "Extracting public key from .sops.yaml"
          CONFIG_KEY=$(yq --yaml-output '.creation_rules[0].age' config/.sops.yaml | sed 's/\.\.\.$//' | tr -d '\n\r')
          
          # Debug output with string lengths and hex dump
          echo "Public key length: ${#PUBLIC_KEY}"
          echo "Config key length: ${#CONFIG_KEY}"
          echo "Public key:"
          echo "$PUBLIC_KEY" | xxd
          echo "Config key:"
          echo "$CONFIG_KEY" | xxd
          
          if [ "$PUBLIC_KEY" != "$CONFIG_KEY" ]; then
            echo "Error: SOPS age key doesn't match .sops.yaml configuration"
            echo "Expected: $CONFIG_KEY"
            echo "Got: $PUBLIC_KEY"
            exit 1
          fi

      - name: Generate and Encrypt Base Environment Variables
        id: generate-base-env
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY_FILE }}
        run: |
          # For local runs checks...
          if [ -n "$SOPS_AGE_KEY_FILE" ]; then
            echo "exporting private key"
            export SOPS_AGE_KEY=$(grep -v "^#" "$SOPS_AGE_KEY_FILE" | tr -d '\n\r')
          fi
          
          echo "üöÄ Starting Base Environment Variables Generation..."
          
          echo "üìù Step 1: Generating new base.env to temp location..."
          # Create a temp directory in the workspace
          TEMP_DIR="./.temp"
          mkdir -p $TEMP_DIR
          
          python .github/workflows/scripts/generate_env.py \
            --config-dir config \
            --input-yaml base.yml \
            --output-dir $TEMP_DIR  # This will generate .temp/base.env
          
          echo "‚úÖ Step 1 completed"

          echo "üìù Step 2: Checking if base.env changed..."
          if [ -f "config/base.env" ]; then
            echo "Found existing base.env file"
            # Convert Windows line endings to Unix before decrypting
            tr -d '\r' < config/base.env > config/base.env.unix
            mv config/base.env.unix config/base.env
            # Check if file is a valid SOPS encrypted file
            if sops --config config/.sops.yaml --decrypt config/base.env > $TEMP_DIR/existing_base.env; then
              echo "Decrypted existing base.env"
            else
              echo "base.env is not a valid SOPS encrypted file, creating empty comparison file"
              touch $TEMP_DIR/existing_base.env
            fi
          else
            echo "No existing base.env found, creating empty comparison file"
            touch $TEMP_DIR/existing_base.env
          fi

          echo "üìù Step 3: Merging existing values with new template..."
          # Run merge_secrets.py and capture output to file
          python .github/workflows/scripts/merge_secrets.py \
            --source $TEMP_DIR/base.env \
            --target $TEMP_DIR/existing_base.env \
            --output $TEMP_DIR/merged_base.env \
            --env base \
            --preserve-existing | tee $TEMP_DIR/merge_output.txt

          # Explicitly capture the exit code
          MERGE_STATUS=${PIPESTATUS[0]}
          echo "Merge script exit code: $MERGE_STATUS"

          if [ $MERGE_STATUS -eq 10 ]; then
            echo "No changes to base.env, skipping commit."
            echo "changes=no" >> $GITHUB_OUTPUT
            # Don't encrypt or add to git if no changes
          else
            echo "base.env changed, will commit."
            echo "unset PGP environment variable to force age encryption"
            unset SOPS_PGP_FP
            echo "Encrypting new base.env..."
            sops --config config/.sops.yaml --encrypt $TEMP_DIR/merged_base.env > config/base.env
            git add config/base.env
            echo "changes=yes" >> $GITHUB_OUTPUT
          fi

          echo "üìù Step 4: Updating GitHub Step Summary..."
          {
            echo "### Base Environment Variable Generation Results üìù"
            echo "#### File Status:"
            echo '```'
            ls -l config/base.env $TEMP_DIR/existing_base.env 2>/dev/null || echo "Some files not found"
            echo '```'
            
            echo "#### Changes:"
            echo '```'
            cat $TEMP_DIR/merge_output.txt
            echo '```'
            
            if [ "$(cat $GITHUB_OUTPUT | grep '^changes=' | cut -d'=' -f2)" = "yes" ]; then
              echo "üìù Changes were made to base.env"
            else
              echo "‚úÖ No changes were required to base.env"
            fi
          } >> $GITHUB_STEP_SUMMARY
          
          echo "‚úÖ Base Environment Variables Generation completed"

      # - name: Generate and Encrypt Environment-Specific Variables
      #   env:
      #     SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY_FILE }}
      #   run: |
      #     for ENV in development production; do
      #       echo "Processing $ENV environment..."

      #       # Step 1: Generate template from base.yml (for structure, not for commit)
      #       echo "Generating template for $ENV..."
      #       python .github/workflows/scripts/generate_env.py \
      #         --config-dir config \
      #         --environment $ENV \
      #         --input-yaml base.yml \
      #         --output-dir /tmp/templates \
      #         | tee /tmp/${ENV}_template_output.txt

      #       # Step 2: Decrypt base.env and environment file
      #       sops --config config/.sops.yaml --decrypt config/base.env > /tmp/base.env
      #       if [ -f "config/environments/${ENV}.env" ]; then
      #         sops --config config/.sops.yaml --decrypt "config/environments/${ENV}.env" > "/tmp/${ENV}.env"
      #       else
      #         cp /tmp/base.env "/tmp/${ENV}.env"
      #       fi

      #       # Step 3: Merge and check for changes
      #       set +e
      #       python .github/workflows/scripts/merge_secrets.py \
      #         --source /tmp/base.env \
      #         --target /tmp/${ENV}.env \
      #         --output /tmp/merged_${ENV}.env \
      #         --env $ENV | tee /tmp/${ENV}_merge_output.txt
      #       status=$?
      #       set -e

      #       # Step 4: Encrypt and commit only if there are changes
      #       if [ "$status" -eq 0 ]; then
      #         echo "Secrets changed in $ENV.env, will commit."
      #         sops --config config/.sops.yaml --encrypt /tmp/merged_${ENV}.env > config/environments/${ENV}.env
      #         git add config/environments/${ENV}.env
      #         CHANGES_MADE="yes"
      #       else
      #         echo "No changes to secrets in $ENV.env, skipping commit."
      #         CHANGES_MADE="no"
      #       fi

      #       # Step 5: Add to GitHub Step Summary
      #       {
      #         echo "### $ENV Environment Variable Results üîß"
      #         echo "#### Template Generation:"
      #         echo '```'
      #         cat /tmp/${ENV}_template_output.txt
      #         echo '```'

      #         echo "#### Merge Results:"
      #         echo '```'
      #         cat /tmp/${ENV}_merge_output.txt
      #         echo '```'

      #         echo "#### File Status:"
      #         echo '```'
      #         ls -l "/tmp/templates/${ENV}.env" "/tmp/merged_${ENV}.env" "config/environments/${ENV}.env" 2>/dev/null || echo "Some files not found"
      #         echo '```'

      #         if [ "$CHANGES_MADE" = "yes" ]; then
      #           echo "üìù Changes were made to $ENV.env"
      #         else
      #           echo "‚úÖ No changes were required to $ENV.env"
      #         fi

      #         echo
      #       } >> $GITHUB_STEP_SUMMARY

      #       # Step 6: Clean up temporary files for this environment
      #       rm -f "/tmp/${ENV}.env" "/tmp/merged_${ENV}.env" "/tmp/${ENV}_merge_output.txt" "/tmp/${ENV}_template_output.txt"
      #     done

      #     # Final cleanup
      #     rm -rf /tmp/templates

      - name: Commit and push changes
        if: steps.generate-base-env.outputs.changes == 'yes'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Get the default branch name
          DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
          echo "Default branch is: $DEFAULT_BRANCH"
          
          # Commit changes
          git add config/base.env
          git commit -m "chore: update and encrypt base.env template file"
          
          # Pull remote default branch with rebase
          git pull origin $DEFAULT_BRANCH --rebase
          
          # Finally push
          git push origin HEAD:$DEFAULT_BRANCH

      - name: Report Status
        if: always()
        run: |
          echo "Config Env Summary:"
          echo "- Sync status: ${{ job.status }}"
          echo "- Base env file: $(test -f config/base.env && echo '‚úÖ' || echo '‚ùå')"
          for ENV in development production; do
            echo "- $ENV env file: $(test -f config/environments/$ENV.env && echo '‚úÖ' || echo '‚ùå')"
          done