# IBKR/config/README.md
name: Config Env

on:
  workflow_run:
    workflows: ["Config Sync"]  # Name must match config-sync.yml's name
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync-config:
    # Only run if the config-sync workflow succeeded and it was a merge to main
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.event == 'pull_request' &&
       github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml yamllint yq dotenv
          # Install SOPS
          curl -L https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux.amd64 -o sops
          chmod +x sops
          sudo mv sops /usr/local/bin/

      - name: Setup SOPS
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY_FILE }}
        run: |
          echo "Extracting public key from SOPS_AGE_KEY secret"
          PUBLIC_KEY=$(echo "$SOPS_AGE_KEY" | awk '/public key:/ {print $4}' | tr -d '\n\r')
          echo "Extracting public key from .sops.yaml"
          CONFIG_KEY=$(yq --yaml-output '.creation_rules[0].age' config/.sops.yaml | sed 's/\.\.\.$//' | tr -d '\n\r')
          
          # Debug output with string lengths and hex dump
          echo "Public key length: ${#PUBLIC_KEY}"
          echo "Config key length: ${#CONFIG_KEY}"
          echo "Public key:"
          echo "$PUBLIC_KEY" | xxd
          echo "Config key:"
          echo "$CONFIG_KEY" | xxd
          
          if [ "$PUBLIC_KEY" != "$CONFIG_KEY" ]; then
            echo "Error: SOPS age key doesn't match .sops.yaml configuration"
            echo "Expected: $CONFIG_KEY"
            echo "Got: $PUBLIC_KEY"
            exit 1
          fi

      - name: Generate and Encrypt Base Environment Variables
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY_FILE }}
        run: |
          # Step 1: Generate new template
          python .github/workflows/scripts/generate_env.py \
            --config-dir config \
            --input-yaml base.yml \
            --output-dir /tmp
          
          # Step 2: Handle existing base.env
          if [ -f "config/base.env" ]; then
            echo "Attempting to decrypt existing base.env..."
            if sops --config config/.sops.yaml --decrypt config/base.env > /tmp/existing_base.env 2>/dev/null; then
              echo "Successfully decrypted existing base.env"
              
              # Step 3a: Merge if we have both files
              python .github/workflows/scripts/merge_secrets.py \
                --source "/tmp/base.env" \
                --target "/tmp/existing_base.env" \
                --output "/tmp/final_base.env" \
                --env "base" | tee /tmp/merge_output.txt
            else
              echo "Failed to decrypt existing base.env, using new template..."
              # Step 3b: Use new template if decrypt fails
              cp /tmp/base.env /tmp/final_base.env
              echo "Using new template file" > /tmp/merge_output.txt
            fi
          else
            echo "No existing base.env, using generated template..."
            # Step 3c: Use new template if no existing file
            cp /tmp/base.env /tmp/final_base.env
            echo "Created new base.env from template" > /tmp/merge_output.txt
          fi

          # Step 4: Encrypt final result
          echo "Encrypting final base.env..."
          sops --config config/.sops.yaml \
               --encrypt "/tmp/final_base.env" > config/base.env || {
            echo "Failed to encrypt base.env"
            cat config/.sops.yaml
            exit 1
          }
          
          # Step 5: Debug output
          echo "File sizes after processing:"
          ls -l /tmp/base.env /tmp/final_base.env config/base.env || true

          # Step 6: Add to GitHub Step Summary
          {
            echo "### Base Environment Variable Generation Results üìù" 
            echo "#### Process Summary:"
            echo '```'
            cat /tmp/merge_output.txt
            echo '```'
            
            echo "#### File Status:"
            echo '```'
            ls -l /tmp/base.env /tmp/final_base.env config/base.env 2>/dev/null || echo "Some files not found"
            echo '```'
            
            if [ -f "/tmp/merge_output.txt" ] && grep -q "No changes" "/tmp/merge_output.txt"; then
              echo "‚úÖ No changes were required to base.env"
            else
              echo "üìù Changes were made to base.env"
            fi
          } >> $GITHUB_STEP_SUMMARY

      - name: Generate and Encrypt Environment-Specific Variables
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY_FILE }}
        run: |
          for ENV in development production; do
            echo "Processing $ENV environment..."
            
            # Step 1: Generate template from base.yml
            echo "Generating template for $ENV..."
            python .github/workflows/scripts/generate_env.py \
              --config-dir config \
              --environment $ENV \
              --input-yaml base.yml \
              --output-dir /tmp/templates \
              | tee /tmp/${ENV}_template_output.txt
            
            # Step 2: Handle existing environment file
            if [ -f "config/environments/$ENV.env" ]; then
              echo "Found existing $ENV.env, attempting to decrypt..."
              if sops --config config/.sops.yaml --decrypt "config/environments/$ENV.env" > "/tmp/existing_${ENV}.env"; then
                echo "Successfully decrypted $ENV.env"
                
                # Step 3a: Merge if we have both files
                python .github/workflows/scripts/merge_secrets.py \
                  --source "/tmp/templates/${ENV}.env" \
                  --target "/tmp/existing_${ENV}.env" \
                  --output "/tmp/final_${ENV}.env" \
                  --env "$ENV" | tee /tmp/${ENV}_merge_output.txt
              else
                echo "Failed to decrypt $ENV.env, using new template..."
                # Step 3b: Use new template if decrypt fails
                cp "/tmp/templates/${ENV}.env" "/tmp/final_${ENV}.env"
                echo "Using new template file for $ENV" > /tmp/${ENV}_merge_output.txt
              fi
            else
              echo "No existing $ENV.env, using generated template..."
              # Step 3c: Use new template if no existing file
              cp "/tmp/templates/${ENV}.env" "/tmp/final_${ENV}.env"
              echo "Created new $ENV.env from template" > /tmp/${ENV}_merge_output.txt
            fi
            
            # Step 4: Format the merged file (maintain sorting)
            sort "/tmp/final_${ENV}.env" > "/tmp/final_${ENV}.env.sorted"
            mv "/tmp/final_${ENV}.env.sorted" "/tmp/final_${ENV}.env"
            
            # Step 5: Encrypt the final environment file
            echo "Encrypting final $ENV.env..."
            mkdir -p config/environments
            if ! sops --config config/.sops.yaml \
                     --encrypt "/tmp/final_${ENV}.env" > "config/environments/$ENV.env"; then
              echo "Failed to encrypt $ENV.env"
              cat config/.sops.yaml
              exit 1
            fi
            
            # Step 6: Add to GitHub Step Summary
            {
              echo "### $ENV Environment Variable Results üîß"
              echo "#### Template Generation:"
              echo '```'
              cat /tmp/${ENV}_template_output.txt
              echo '```'
              
              echo "#### Merge Results:"
              echo '```'
              cat /tmp/${ENV}_merge_output.txt
              echo '```'
              
              echo "#### File Status:"
              echo '```'
              ls -l "/tmp/templates/${ENV}.env" "/tmp/final_${ENV}.env" "config/environments/$ENV.env" 2>/dev/null || echo "Some files not found"
              echo '```'
              
              if [ -f "/tmp/${ENV}_merge_output.txt" ] && grep -q "No changes" "/tmp/${ENV}_merge_output.txt"; then
                echo "‚úÖ No changes were required to $ENV.env"
              else
                echo "üìù Changes were made to $ENV.env"
              fi
              
              echo
            } >> $GITHUB_STEP_SUMMARY
            
            # Step 7: Clean up temporary files for this environment
            rm -f "/tmp/existing_${ENV}.env" "/tmp/templates/${ENV}.env"
          done
          
          # Final cleanup
          rm -rf /tmp/templates

      - name: Check for configuration changes
        id: check-changes
        run: |
          if [[ $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add config/base.env config/environments/*.env
          git commit -m "chore: update and encrypt environment files"
          git push origin main

      - name: Report Status
        if: always()
        run: |
          echo "Config Env Summary:"
          echo "- Sync status: ${{ job.status }}"
          echo "- Base env file: $(test -f config/base.env && echo '‚úÖ' || echo '‚ùå')"
          for ENV in development production; do
            echo "- $ENV env file: $(test -f config/environments/$ENV.env && echo '‚úÖ' || echo '‚ùå')"
          done
