# IBKR/config/README.md
name: Config Sync

on:
  workflow_run:
    workflows: ["Config Sync"]  # Name must match config-sync.yml's name
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync-config:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'pull_request' &&
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
          pip install yamllint
          pip install yq

      - name: Generate Secret Environment Variables
        run: |
          python .github/workflows/scripts/generate_env.py

      - name: Format ENV file
        run: |
          # Sort the file alphabetically
          sort config/base.env > config/base.env.tmp
          
          # Remove Windows carriage returns
          tr -d '\r' < config/base.env.tmp > config/base.env.clean
          
          # Move the cleaned file back to original
          mv config/base.env.clean config/base.env
          
          # Clean up temporary file
          rm config/base.env.tmp

      - name: Check for configuration changes
        id: check-changes
        run: |
          if [[ $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add config/base.env
          git commit -m "chore: sort and format base.env file"
          git push origin main

      - name: Report Status
        if: always()
        run: |
          echo "Config Sync Summary:"
          echo "- Sync status: ${{ job.status }}"
