# IBKR/config/README.md
name: Config Env

on:
  workflow_run:
    workflows: ["Config Sync"]  # Name must match config-sync.yml's name
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync-config:
    # Only run if the config-sync workflow succeeded and it was a merge to main
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.event == 'pull_request' &&
       github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml yamllint yq
          # Install SOPS
          curl -L https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux.amd64 -o sops
          chmod +x sops
          sudo mv sops /usr/local/bin/

      - name: Setup SOPS
        env:
          SOPS_AGE_KEY: ${{ secrets.SOPS_AGE_KEY_FILE }}
        run: |
          # Extract public key using awk - more robust against whitespace variations
          PUBLIC_KEY=$(echo "$SOPS_AGE_KEY" | awk '/public key:/ {print $4}' | tr -d '\n\r')
          # Use Python yq syntax and trim any whitespace
          CONFIG_KEY=$(yq --yaml-output '.creation_rules[0].age' config/.sops.yaml | tr -d '\n\r')
          
          # Debug output with string lengths and hexdump
          echo "Public key length: ${#PUBLIC_KEY}"
          echo "Config key length: ${#CONFIG_KEY}"
          echo "Public key:"
          echo "$PUBLIC_KEY" | xxd
          echo "Config key:"
          echo "$CONFIG_KEY" | xxd
          
          if [ "$PUBLIC_KEY" != "$CONFIG_KEY" ]; then
            echo "Error: SOPS age key doesn't match .sops.yaml configuration"
            echo "Expected: $CONFIG_KEY"
            echo "Got: $PUBLIC_KEY"
            exit 1
          fi

      - name: Generate Base Environment Variables
        run: |
          OUTPUT=$(python .github/workflows/scripts/generate_env.py \
            --config-dir config \
            --input-yaml base.yml)
          
          echo "### Base Environment Variable Generation Results üìù" >> $GITHUB_STEP_SUMMARY
          echo "#### Warnings:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$OUTPUT" | grep "Warning:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          echo "#### Results:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$OUTPUT" | grep "Generated\|Found\|Notice:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Generate Environment-Specific Variables
        run: |
          for ENV in development production; do
            echo "### Generating $ENV Environment Variables üîß" >> $GITHUB_STEP_SUMMARY
            
            OUTPUT=$(python .github/workflows/scripts/generate_env.py \
              --config-dir config \
              --environment $ENV \
              --input-yaml base.yml \
              --output-dir config/environments)
            
            echo "#### $ENV Warnings:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$OUTPUT" | grep "Warning:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            echo "#### $ENV Results:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$OUTPUT" | grep "Generated\|Found\|Notice:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          done

      - name: Format ENV Files
        run: |
          # Function to format env file
          format_env_file() {
            local file=$1
            if [ -f "$file" ]; then
              # Sort and clean the file
              sort "$file" > "$file.tmp"
              tr -d '\r' < "$file.tmp" > "$file.clean"
              mv "$file.clean" "$file"
              rm "$file.tmp"
              echo "Formatted $file"
            fi
          }
          
          # Format base.env
          format_env_file "config/base.env"
          
          # Format environment-specific files
          for ENV in development production; do
            format_env_file "config/environments/$ENV.env"
          done

      - name: Encrypt ENV Files
        if: github.ref == 'refs/heads/main'
        run: |
          # Function to encrypt file if it exists
          encrypt_file() {
            local file=$1
            if [ -f "$file" ]; then
              sops -e -i "$file"
              echo "Encrypted $file"
            fi
          }
          
          # Encrypt base.env
          encrypt_file "config/base.env"
          
          # Encrypt environment files
          for ENV in development production; do
            encrypt_file "config/environments/$ENV.env"
          done

      - name: Check for configuration changes
        id: check-changes
        run: |
          if [[ $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add config/base.env config/environments/*.env
          git commit -m "chore: update and encrypt environment files"
          git push origin main

      - name: Report Status
        if: always()
        run: |
          echo "Config Env Summary:"
          echo "- Sync status: ${{ job.status }}"
          echo "- Base env file: $(test -f config/base.env && echo '‚úÖ' || echo '‚ùå')"
          for ENV in development production; do
            echo "- $ENV env file: $(test -f config/environments/$ENV.env && echo '‚úÖ' || echo '‚ùå')"
          done
