services:
  market-scanner:
    build: .
    container_name: market-scanner
    restart: unless-stopped
    labels:
      # Core configuration
      - "traefik.enable=true"
      # Router configuration
      - "traefik.http.routers.market-scanner.rule=Host(`api.localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.market-scanner.entrypoints=web,websecure"
      - "traefik.http.routers.market-scanner.middlewares=strip-api-prefix@docker,security-headers@docker"
      - "traefik.http.routers.market-scanner.tls=true"
      # Service configuration
      - "traefik.http.services.market-scanner.loadbalancer.server.port=8000"
      # Middleware configuration
      - "traefik.http.middlewares.strip-api-prefix.stripprefix.prefixes=/api"
      - "traefik.http.middlewares.security-headers.headers.sslRedirect=true" # redirect http to https
      - "traefik.http.middlewares.security-headers.headers.forceSTSHeader=true" # force sts header
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true" # prevent clickjacking
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true" # prevent mime type sniffing
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true" # prevent xss
      - "traefik.http.middlewares.security-headers.headers.referrerPolicy=strict-origin-when-cross-origin" # prevent referrer leakage
      
    environment:
      - ENV_MODE=${ENV_MODE:-dev}
      - PORT=${PORT:-8000}
      - DOMAIN=${DOMAIN:-localhost}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "${PORT:-8000}:${PORT:-8000}"
    volumes:
      - ./.data:/app/.data
      - ./config.yaml:/app/config.yaml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network

  # Traefik reverse proxy service
  reverse-proxy:
    image: traefik:v3.3
    container_name: traefik
    # Static configuration
    environment:
      # Core configuration
      - "TRAEFIK_LOG_LEVEL=${LOG_LEVEL:-DEBUG}"
      - "TRAEFIK_ACCESSLOG=true"
      - "TRAEFIK_API_INSECURE=true"
      - "TRAEFIK_PROVIDERS_DOCKER=true"
      # Entrypoints
      - "TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80"
      - "TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443"
      # TLS Configuration
      - "TRAEFIK_ENTRYPOINTS_WEBSECURE_HTTP_TLS=true"
      # Default certificate configuration
      - "TRAEFIK_TLS_STORES_DEFAULT_DEFAULTCERTIFICATE_CERTFILE=/certs/wildcard.crt"
      - "TRAEFIK_TLS_STORES_DEFAULT_DEFAULTCERTIFICATE_KEYFILE=/certs/wildcard.key"
      # Domain configuration
      - "DOMAIN=${DOMAIN:-localhost}"
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS
      - "8080:8080" # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Docker socket
      - ./certs:/certs:ro # Certificates
      # - ./traefik.yml:/etc/traefik/traefik.yml:ro  # traefik config file
    networks:
      - trading-network
    # Dynamic Configuration
    labels:
      # Core configuration
      - "traefik.enable=true"
      # Router configuration
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.entrypoints=web,websecure"
      - "traefik.http.routers.traefik.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.traefik.service=api@internal"
  # Test service to verify Traefik routing
  # whoami:
  #   image: traefik/whoami  # Simple test container that shows request info
  #   container_name: whoami
  #   labels:
  #     - "traefik.enable=true"  # Enable Traefik for this container
  #     - "traefik.http.routers.whoami.rule=Host(`whoami.localhost`)"  # Route requests for whoami.localhost
  #     - "traefik.http.services.whoami.loadbalancer.server.port=80"   # Container port to route to
  #   networks:
  #     - trading-network

# Shared network for all services
networks:
  trading-network:
    name: trading-network 